🏈 FANTASY FOOTBALL ANALYTICS PIPELINE
============================================================
Started at: 2025-08-21 13:48:33
🚀 Using Basic Pipeline Execution (Fallback)
📊 Features: Sequential execution, basic error handling

Selected phase: draft

🔄 Step 1/5: Data Collection

============================================================
STEP: Data Collection
============================================================
📋 Collect raw NFL data from multiple sources
🚀 Running: python -m ffbayes.data_pipeline.collect_data
⏱️  Timeout: 300 seconds

✅ Module ffbayes.data_pipeline.collect_data can be imported
🔄 Starting execution...
----------------------------------------
2025-08-21 13:48:35,666 - ffbayes-collect - INFO - Starting ffbayes-collect
2025-08-21 13:48:35,667 - ffbayes-collect - INFO - Starting ffbayes-collect
2025-08-21 13:48:35,667 - ffbayes-collect - INFO - Processing default years: [2020, 2021, 2022, 2023, 2024]
📊 Collecting NFL data for years: [2020, 2021, 2022, 2023, 2024]
   📅 Automatically calculated last 5 available years from current year (2025)
on 0: ⏭️  Skipping year 2020 as file already exists
on 0: ⏭️  Skipping year 2021 as file already exists
on 0: ⏭️  Skipping year 2022 as file already exists
on 0: ⏭️  Skipping year 2023 as file already exists
on 0: ⏭️  Skipping year 2024 as file already exists
Data Collection: Processing Years |⚠︎                                       | (!) 0/5 [0%] in 0.0s (0.00/s) 
2025-08-21 13:48:35,693 - ffbayes-collect - INFO - Collection completed in 0.0 seconds
2025-08-21 13:48:35,694 - ffbayes-collect - INFO - Successfully processed 0 years: []
2025-08-21 13:48:35,694 - ffbayes-collect - INFO - ffbayes-collect: Data collection completed successfully
----------------------------------------
✅ Data Collection completed successfully in 0.7 seconds
✅ Step 1 completed. Moving to next step...


🔄 Step 2/5: Data Validation

============================================================
STEP: Data Validation
============================================================
📋 Validate data quality and completeness
🚀 Running: python -m ffbayes.data_pipeline.validate_data
⏱️  Timeout: 300 seconds

✅ Module ffbayes.data_pipeline.validate_data can be imported
🔄 Starting execution...
----------------------------------------
2025-08-21 13:48:36,327 - ffbayes-validate - INFO - Starting ffbayes-validate
2025-08-21 13:48:36,327 - ffbayes-validate - INFO - Starting ffbayes-validate
🔍 Validating data quality...
   📁 Found 10 season datasets
on 0:       ✅ 2015: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2016: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2017: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2018: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2019: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2020: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2021: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2022: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2023: Good data quality (0.0% missing in core columns)
on 0:       ✅ 2024: Good data quality (0.0% missing in core columns)
Data Validation: Validating Season Data |⚠︎                                       | (!) 0/10 [0%] in 0.4s (0.00/s) 
2025-08-21 13:48:36,788 - ffbayes-validate - INFO - Validation completed in 0.5 seconds
2025-08-21 13:48:36,788 - ffbayes-validate - INFO - Total rows: 53,155
2025-08-21 13:48:36,788 - ffbayes-validate - INFO - Quality score: 100.0%
2025-08-21 13:48:36,788 - ffbayes-validate - INFO - Data complete: True
2025-08-21 13:48:36,788 - ffbayes-validate - INFO - Outlier detection (10):
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2015: Unusually high game numbers: 21.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2016: Unusually high game numbers: 21.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2017: Unusually high game numbers: 21.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2018: Unusually high game numbers: 21.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2019: Unusually high game numbers: 21.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2020: Unusually high game numbers: 21.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2021: Unusually high game numbers: 22.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2022: Unusually high game numbers: 22.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2023: Unusually high game numbers: 22.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO -   • 2024: Unusually high game numbers: 22.0
2025-08-21 13:48:36,788 - ffbayes-validate - INFO - ffbayes-validate: Data validation passed! Ready for processing.

📊 Checking data completeness...
   ✅ All expected recent years available
----------------------------------------
✅ Data Validation completed successfully in 1.1 seconds
✅ Step 2 completed. Moving to next step...


🔄 Step 3/5: Data Preprocessing

============================================================
STEP: Data Preprocessing
============================================================
📋 Preprocess data for analysis
🚀 Running: python -m ffbayes.data_pipeline.preprocess_analysis_data
⏱️  Timeout: 300 seconds

✅ Module ffbayes.data_pipeline.preprocess_analysis_data can be imported
🔄 Starting execution...
----------------------------------------
2025-08-21 13:48:37,634 - ffbayes-preprocess - INFO - Starting ffbayes-preprocess
2025-08-21 13:48:37,634 - ffbayes-preprocess - INFO - Starting ffbayes-preprocess
2025-08-21 13:48:37,634 - ffbayes-preprocess - INFO - Using data directory: /Users/ncamarda/Library/CloudStorage/OneDrive-Personal/Desktop/coding/ffbayes/datasets
2025-08-21 13:48:38,421 - ffbayes-preprocess - INFO - Preprocessing completed!
2025-08-21 13:48:38,421 - ffbayes-preprocess - INFO - Final dataset: (13459, 38)
2025-08-21 13:48:38,421 - ffbayes-preprocess - INFO - Teams: 32
2025-08-21 13:48:38,421 - ffbayes-preprocess - INFO - ffbayes-preprocess: Data preprocessing completed successfully
Loading and preprocessing data for analysis...
Using 5 season files for last 5 years: ['2021season.csv', '2020season.csv', '2023season.csv', '2022season.csv', '2024season.csv']
Target years: [2020, 2021, 2022, 2023, 2024]
Combined data shape: (28026, 14)
Available columns: ['G#', 'Date', 'Tm', 'Away', 'Opp', 'FantPt', 'FantPtPPR', 'Name', 'PlayerID', 'Position', 'Season', 'GameInjuryStatus', 'PracticeInjuryStatus', 'is_home']
Season range: 2020 - 2024
After cleaning, data shape: (13459, 38)
Season range after cleaning: 2020 - 2024
Combined dataset saved to: datasets/combined_datasets/2020-2024season_modern.csv
Shape: (13459, 38)
----------------------------------------
✅ Data Preprocessing completed successfully in 1.6 seconds
✅ Step 3 completed. Moving to next step...


🔄 Step 4/5: Bayesian Analysis

============================================================
STEP: Bayesian Analysis
============================================================
📋 Generate player-level predictions with uncertainty using PyMC4
🚀 Running: python -m ffbayes.analysis.bayesian_hierarchical_ff_modern
⏱️  Timeout: 300 seconds

✅ Module ffbayes.analysis.bayesian_hierarchical_ff_modern can be imported
🔄 Starting execution...
----------------------------------------
Sampling: [fantasy_points]
🚀 QUICK TEST MODE ENABLED for Bayesian model
Default configuration: 2 cores, 100 draws, 2 chains
============================================================
Modern Bayesian Hierarchical Fantasy Football Model
Using PyMC4 for robust uncertainty quantification
============================================================
✅ Loaded existing trace from: results/bayesian-hierarchical-results/trace_20250821_114725.pkl
🔄 Using existing trace - skipping expensive sampling!
Loading preprocessed data for analysis...
Loading preprocessed data from: datasets/combined_datasets/2020-2024season_modern.csv
Loaded data shape: (13459, 38)
Found 32 teams
Loaded data shape: (13459, 38)
Found 32 teams
Training on 2023 data, testing on 2024 data
Training data shape: (2801, 38)
Test data shape: (2762, 38)
Building modern PyMC4 model...
Part 1: Defining observables...
Part 2: Modeling defensive effects...
Part 3: Modeling home/away effects...
Part 4: Building likelihood models...
Part 5: Using existing trace (skipping sampling)
Model training completed!
Trace saved to: results/bayesian-hierarchical-results/trace_20250821_134845.pkl
Part 6: Evaluating model...
Generating predictions on test data...
Sampling ... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00 / 0:00:01
Test data length: 2762
Predictions length: 2762
Bayesian Model MAE: 3.74
Baseline (7-game avg) MAE: 3.71
Improvement: -0.8%
Part 7: Generating visualizations...
Results saved to results/bayesian-hierarchical-results/modern_model_results.json
Model training and evaluation completed successfully!

============================================================
Model Summary:
- Bayesian Model MAE: 3.74
- Baseline MAE: 3.71
Improvement is not reliable in quick test mode
- Improvement: -0.8%
============================================================
----------------------------------------
✅ Bayesian Analysis completed successfully in 14.7 seconds
✅ Step 4 completed. Moving to next step...


🔄 Step 5/5: Draft Strategy Generation

============================================================
STEP: Draft Strategy Generation
============================================================
📋 Generate optimal draft strategies using Bayesian predictions
🚀 Running: python -m ffbayes.draft_strategy.bayesian_draft_strategy --draft-position 3 --league-size 10 --risk-tolerance medium
⏱️  Timeout: 300 seconds

✅ Module ffbayes.draft_strategy.bayesian_draft_strategy can be imported
🔄 Starting execution...
----------------------------------------
2025-08-21 13:48:59,917 - __main__ - INFO - Loading predictions...
2025-08-21 13:48:59,917 - __main__ - INFO - Loading player data with positions...
2025-08-21 13:48:59,917 - __main__ - INFO - Using most recent dataset: datasets/combined_datasets/2020-2024season_modern.csv
2025-08-21 13:48:59,949 - __main__ - INFO - Loaded player data: (13459, 38)
2025-08-21 13:48:59,963 - __main__ - INFO - Processed 268 players with valid projections
2025-08-21 13:48:59,963 - __main__ - INFO - Position breakdown: {'WR': 112, 'RB': 69, 'TE': 50, 'QB': 35, 'FB': 2}
2025-08-21 13:48:59,963 - __main__ - INFO - Loading Monte Carlo team projections...
2025-08-21 13:48:59,964 - __main__ - INFO - Using most recent Monte Carlo results: results/montecarlo_results/2025_projections_from_years[2023, 2024].tsv
2025-08-21 13:48:59,969 - __main__ - INFO - Generated 200 team projections from Monte Carlo data
2025-08-21 13:48:59,969 - __main__ - INFO - Generating draft strategy...
2025-08-21 13:48:59,969 - __main__ - INFO - Generating draft strategy for position 3
2025-08-21 13:48:59,969 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,971 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,972 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,973 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,975 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,978 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,979 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,981 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,982 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,983 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,984 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,986 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,987 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,989 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,990 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,991 - __main__ - INFO - Created 5 tiers with 268 players
2025-08-21 13:48:59,994 - __main__ - INFO - Generated strategy for 16 picks
2025-08-21 13:49:00,007 - __main__ - INFO - Strategy saved to results/draft_strategy/draft_strategy_pos3_20250821_134900.json
2025-08-21 13:49:00,007 - __main__ - INFO - Draft strategy generation completed successfully

    Teams on column, e.g. Team A and Team B. Positions on rows. 
    Notice QB scored the most, but didn't have the highest differential, and therefore wasn't the most important player
    

    You see, you have a limited amount of spots on your starting to play your players. 
    And your opponent also has a limited number of starting roster spots to play their players. 
    And so the goal of fantasy football is not to maximize how many points you'll score, 
    but maximize your scoring differential at each position in relation to your opponent.
    
You can think of these scoring differentials as our value over replacement numbers.
     A   B  A - B  VOR
QB  20  25     -5    5
RB  19  11      8    8
WR  15  14      1    1

    What we have to do is find a "replacement player" for each position in the draft pool -
    a player who's projected points represents the average postional value at each position.
    Then, with respect to each player's position (this is important. You want to compare each
    player's projected points to their position's replacement value), substract out the replacement
    value you calculated from your replacement player. The value you're left with is each player's
    value over the typical replacement player, or for short, their value over replacement.

Output after reading the html:

    Rank         Player Team (Bye)  POS  ...  Fantrax  AVG  Real-Time (?)
0     1    Ja'Marr Chase CIN (10)  WR1  ...      1.0  1.0              1
1     2    Bijan Robinson ATL (5)  RB1  ...      2.0  2.5              2
2     3    Saquon Barkley PHI (9)  RB2  ...      5.0  3.2              3
3     4  Justin Jefferson MIN (6)  WR2  ...      3.0  4.5           6 -2
4     5      Jahmyr Gibbs DET (8)  RB3  ...      4.0  4.7           4 +1

[5 rows x 11 columns] 

Output after filtering:

           Player Team (Bye)  POS  AVG
0    Ja'Marr Chase CIN (10)  WR1  1.0
1    Bijan Robinson ATL (5)  RB1  2.5
2    Saquon Barkley PHI (9)  RB2  3.2
3  Justin Jefferson MIN (6)  WR2  4.5
4      Jahmyr Gibbs DET (8)  RB3  4.7 

Final output: 

              PLAYER POS  AVG
0     Ja'Marr Chase  WR  1.0
1    Bijan Robinson  RB  2.5
2    Saquon Barkley  RB  3.2
3  Justin Jefferson  WR  4.5
4      Jahmyr Gibbs  RB  4.7
ADP df:  959

Generating replacements...
----------------------------------------
✅ Draft Strategy Generation completed successfully in 1.6 seconds
✅ Step 5 completed. Moving to next step...


============================================================
BASIC PIPELINE SUMMARY
============================================================
📊 Steps completed: 5/5
⏱️  Total time: 19.8 seconds
🎯 Success rate: 100.0%

🎉 Pipeline completed successfully!
📈 Ready for fantasy football analysis!

🏁 Pipeline finished at: 2025-08-21 13:49:00
